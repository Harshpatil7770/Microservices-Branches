package com.xoriant.ecart.controller;

import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.xoriant.ecart.dto.CurrecnyConversionModel;
import com.xoriant.ecart.model.CurrencyConversion;
import com.xoriant.ecart.service.CurrencyConversionService;

import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/api/currency-conversion")
public class CurrencyConversionController {

	private static final Logger logger = Logger.getLogger(CurrencyConversionController.class.getName());

	@Autowired
	private CurrencyConversionService currencyConversionService;

	@Autowired
	private JmsTemplate jmsTemplate;

	@PostMapping("/save")
	public String addNewCurrencyConversionDetails(@RequestBody CurrecnyConversionModel currecnyConversionModel) {
		String result = currencyConversionService.addNewCurrencyConversionDetails(currecnyConversionModel);
		jmsTemplate.send("currency-conversionQ", new MessageCreator() {

			@Override
			public Message createMessage(Session session) throws JMSException {
				return session.createObjectMessage(result);

			}
		});
		logger.info("addNewCurrencyConversionDetails () called ");
		return result;
	}

	@GetMapping("/fetchAll")
	public List<CurrencyConversion> fetchAll() {
		logger.info("fetchAll() called");
		return currencyConversionService.fetchAll();
	}

	@GetMapping("/find/{id}")
	public Optional<CurrencyConversion> fetchById(@PathVariable int id) {
		logger.info("fetchById() called");
		return currencyConversionService.fetchById(id);
	}

	@GetMapping("/find/currency-conversion/{from}/{to}")
	public Optional<CurrencyConversion> fetchByFromAndTo(String from, String to) {
		logger.info("fetchByFromAndTo() called");
		return currencyConversionService.fetchByFromAndTo(from, to);
	}
}
